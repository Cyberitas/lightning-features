<?php
/**
 * @file
 * Code for the lightning_edit feature.
 */

include_once 'lightning_edit.features.inc';

/**
 *  Implements hook_post_features_enable_feature().
 */
function lightning_edit_post_features_enable_feature($component) {
  // Log components as they are enabled.
  watchdog('component', 'lightning_edit enabled ' . $component . ' component');
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Many modules rely on attaching assets to form $elements in order to support
 * WYSIWYG editing. Since the $elements are only rendered when editing content
 * on the back end, the associated assets are not available on the front end
 * when doing in-place editing.
 *
 * Check if an entity has any attached rich text fields and duplicate the
 * process of adding the required assets for various modules.
 */
function lightning_edit_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];

    if ($element['#field_type'] == 'text_with_summary') {
      foreach ($element['#items'] as $delta => $item) {
        if (!isset($item['format'])) {
          return;
        }

        if (!isset($item['value'])) {
          return;
        }

        // Initialize CKEditor. Quick Edit adds the editor itself.
        // This is a copy of ckeditor_pre_render_text_format().
        if (module_exists('ckeditor')) {
          static $init = FALSE;

          module_load_include('inc', 'ckeditor', 'includes/ckeditor.lib');
          if ($init === FALSE) {
            $input_formats = ckeditor_profiles_compile();
            drupal_add_js(array('ckeditor' => array('input_formats' => $input_formats, 'plugins' => array())), 'setting');
            $init = TRUE;
          }
        }

        // Add the Media browser.
        // This is a copy of media_wysiwyg_pre_render_text_format().
        if (module_exists('media_wysiwyg')) {
          $tagmap = _media_wysiwyg_generate_tagMap($item['value']);

          if (isset($tagmap)) {
            $element[$delta]['#attached']['js'][] = array(
              'data' => array(
                'tagmap' => $tagmap,
              ),
              'type' => 'setting',
            );
          }

          // Load the media browser library.
          module_load_include('inc', 'media', 'includes/media.browser');
          $javascript = media_browser_js();

          foreach ($javascript as $key => $definitions) {
            foreach ($definitions as $definition) {
              $element[$delta]['#attached'][$key][] = $definition;
            }
          }

          // Add wysiwyg-specific settings.
          $settings = array('wysiwyg_allowed_attributes' => variable_get('media_wysiwyg_wysiwyg_allowed_attributes', _media_wysiwyg_wysiwyg_allowed_attributes_default()));
          $element[$delta]['#attached']['js'][] = array(
            'data' => array(
              'media' => $settings,
            ),
            'type' => 'setting',
          );

          // Add filter handling.
          $element[$delta]['#attached']['js'][] = drupal_get_path('module', 'media_wysiwyg') . '/js/media_wysiwyg.filter.js';

          // Add CKEditor-specific JS.
          if (module_exists('ckeditor')) {
            $element[$delta]['#attached']['js'][] = array(
              'data' => drupal_get_path('module', 'media_wysiwyg') . '/wysiwyg_plugins/media_ckeditor/library.js',
              'type' => 'file',
              'scope' => 'footer',
              'weight' => -20,
            );
          }
        }
      }
    }
  }
}
