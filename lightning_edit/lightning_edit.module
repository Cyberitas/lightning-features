<?php
/**
 * @file
 * Code for the lightning_edit feature.
 */

include_once 'lightning_edit.features.inc';

/**
 *  Implements hook_post_features_enable_feature().
 */
function lightning_edit_post_features_enable_feature($component) {
  // Log components as they are enabled.
  watchdog('component', 'lightning_edit enabled ' . $component . ' component');
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Many modules rely on attaching assets to form $elements in order to support
 * WYSIWYG editing. Since the $elements are only rendered when editing content
 * on the back end, the associated assets are not available on the front end
 * when doing in-place editing.
 *
 * Check if an entity has any attached rich text fields and duplicate the
 * process of adding the required assets for various modules.
 */
function lightning_edit_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];

    if ($element['#field_type'] == 'text_with_summary') {
      foreach ($element['#items'] as $delta => $item) {
        if (!isset($item['format'])) {
          return;
        }

        if (!isset($item['value'])) {
          return;
        }

        // Initialize CKEditor. Quick Edit adds the editor itself.
        // This is a copy of ckeditor_pre_render_text_format().
        if (module_exists('ckeditor')) {
          static $init = FALSE;

          module_load_include('inc', 'ckeditor', 'includes/ckeditor.lib');
          if ($init === FALSE) {
            $input_formats = ckeditor_profiles_compile();
            drupal_add_js(array('ckeditor' => array('input_formats' => $input_formats, 'plugins' => array())), 'setting');
            $init = TRUE;
          }
        }

        // Add the Media browser.
        // This is a copy of media_wysiwyg_pre_render_text_format().
        if (module_exists('entity_embed')) {
          ctools_include('export');

          $embed_buttons = ctools_export_crud_load_all('entity_embed');

          $buttons = array();

          foreach ($embed_buttons as $embed_button) {
            $buttons[$embed_button->name] = array(
              'id' => check_plain($embed_button->name),
              'name' => check_plain($embed_button->name),
              'label' => check_plain($embed_button->button_label),
              'entity_type' => check_plain($embed_button->entity_type),
              'image' => check_plain(_entity_embed_button_image($embed_button->button_icon_fid)),
            );
          }

          $element['#attached']['library'][] = array('entity_embed', 'drupal.dialog.ajax');

          $element['#attached']['js'][] = array(
            'data' => array(
              'entity_embed' => array(
                'DrupalEntity_dialogTitleAdd' => t('Insert entity'),
                'DrupalEntity_dialogTitleEdit' => t('Edit entity'),
                'DrupalEntity_buttons' => $buttons,
              ),
            ),
            'type' => 'setting',
          );
        }
      }
    }
  }
}
